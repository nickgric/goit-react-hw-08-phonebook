{"version":3,"file":"static/js/870.1d556c97.chunk.js","mappings":"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","sources":["redux/contacts/contactsSelectors.js","components/AddContact/AddContact.jsx","components/ContactsFilter/ContactsFilter.jsx","components/ContactsItem/ContactsItem.jsx","redux/filter/filterSelectors.js","components/ContactsList/ContactsList.jsx","components/EditContactForm/EditContactForm.jsx","pages/Contacts.jsx"],"sourcesContent":["export const selectContacts = state => state.contacts.contacts;\nexport const selectLoading = state => state.contacts.contactsLoading;\nexport const selectEdit = state => state.contacts.editedContact;\n","import { useState } from 'react';\nimport { nanoid } from 'nanoid';\n\nimport { useSelector, useDispatch } from 'react-redux';\nimport { addContact } from 'redux/contacts/contactsOperations';\nimport { selectContacts } from 'redux/contacts/contactsSelectors';\n\nimport { Box } from '@mui/system';\nimport { Button, TextField } from '@mui/material';\n\nexport const AddContact = () => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n\n  const submitHandler = event => {\n    event.preventDefault();\n\n    const id = nanoid();\n\n    if (contacts.find(contact => contact.name === name)) {\n      return alert(`${name} is already in contacts!`);\n    }\n\n    dispatch(addContact({ name, number, id }));\n\n    event.target.reset();\n  };\n\n  const inputHandler = ({ target }) => {\n    switch (target.name) {\n      case 'name':\n        setName(target.value);\n        break;\n      case 'number':\n        setNumber(target.value);\n        break;\n      default:\n        break;\n    }\n  };\n\n  return (\n    <Box component=\"form\" onSubmit={submitHandler}>\n      <TextField\n        sx={{ marginBottom: '16px' }}\n        label=\"Name\"\n        variant=\"outlined\"\n        onInput={inputHandler}\n        type=\"text\"\n        name=\"name\"\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan!\"\n        required\n        fullWidth={true}\n      />\n      <TextField\n        sx={{ marginBottom: '16px' }}\n        label=\"Number\"\n        variant=\"outlined\"\n        onInput={inputHandler}\n        type=\"tel\"\n        name=\"number\"\n        pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n        title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +!\"\n        required\n        fullWidth={true}\n      />\n      <Button variant=\"outlined\" type=\"submit\">\n        Add contact\n      </Button>\n    </Box>\n  );\n};\n","import { changeFilter } from 'redux/filter/filterSlice';\nimport { useDispatch } from 'react-redux';\n\nimport { TextField } from '@mui/material';\n\nexport const ContactsFilter = () => {\n  const dispatch = useDispatch();\n\n  const filterHandler = ({ target: { value } }) => {\n    dispatch(changeFilter(value));\n  };\n\n  return (\n    <TextField\n      sx={{ marginBottom: '16px' }}\n      label=\"Find contacts by name\"\n      variant=\"outlined\"\n      onInput={filterHandler}\n      type=\"text\"\n      name=\"name\"\n      pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n      title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan!\"\n      fullWidth={true}\n    />\n  );\n};\n","import {\n  Divider,\n  ListItem,\n  Box,\n  Typography,\n  Button,\n  Avatar,\n} from '@mui/material';\n\nexport const ContactsItem = ({ contact, deleteHandler, editHandler }) => {\n  return (\n    <ListItem key={contact.id}>\n      <Avatar />\n      <Typography variant=\"body1\" component=\"p\">\n        <b>\n          {contact.name.length < 35\n            ? contact.name\n            : contact.name.substr(0, 35) + '...'}\n          :\n        </b>{' '}\n        {contact.number}\n      </Typography>\n      <Box>\n        <Button name={contact.id} onClick={editHandler}>\n          Edit\n        </Button>\n        <Button name={contact.id} onClick={deleteHandler}>\n          Delete\n        </Button>\n      </Box>\n      <Divider />\n    </ListItem>\n  );\n};\n","export const selectFilter = state => state.filter.filter;\n","import { ThreeDots } from 'react-loader-spinner';\n\nimport { deleteContact } from 'redux/contacts/contactsOperations';\nimport {\n  selectContacts,\n  selectLoading,\n} from 'redux/contacts/contactsSelectors';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useEffect } from 'react';\n\nimport { ContactsItem } from 'components/ContactsItem';\n\nimport { fetchContacts } from 'redux/contacts/contactsOperations';\nimport { selectFilter } from 'redux/filter/filterSelectors';\nimport { editedContactSaver } from 'redux/contacts/contactsSlice';\n\nimport { List, Typography } from '@mui/material';\n\nexport const ContactsList = ({ setForm }) => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n  const loading = useSelector(selectLoading);\n  const filter = useSelector(selectFilter);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  const filteredContacts = () => {\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter.toLowerCase())\n    );\n  };\n\n  const deleteHandler = ({ target: { name } }) => {\n    const id = name;\n    dispatch(deleteContact(id));\n  };\n\n  const editHandler = ({ target: { name } }) => {\n    const id = name;\n    const contact = contacts.find(contact => contact.id === id);\n    dispatch(editedContactSaver(contact));\n    setForm(true);\n  };\n\n  return (\n    <>\n      <List>\n        {filteredContacts()\n          .sort((a, b) => (a.name > b.name ? 1 : -1))\n          .map(contact => (\n            <ContactsItem\n              key={contact.id}\n              contact={contact}\n              deleteHandler={deleteHandler}\n              editHandler={editHandler}\n            />\n          ))}\n      </List>\n      {contacts.length > 0 && (\n        <Typography variant=\"body2\">\n          Sorted by <b>name</b>\n        </Typography>\n      )}\n      {loading && <ThreeDots height={60} color=\"#1976D2\" />}\n    </>\n  );\n};\n","import { useState, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport { selectContacts } from 'redux/contacts/contactsSelectors';\n\nimport { selectEdit } from 'redux/contacts/contactsSelectors';\nimport { editContact } from 'redux/contacts/contactsOperations';\n\nimport { Box } from '@mui/system';\nimport { Button, TextField } from '@mui/material';\n\nexport const EditContactForm = ({ setForm }) => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const editedContact = useSelector(selectEdit);\n\n  useEffect(() => {\n    setName(editedContact.name);\n    setNumber(editedContact.number);\n  }, [editedContact]);\n\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n\n  const submitHandler = event => {\n    event.preventDefault();\n\n    if (\n      contacts.find(contact => contact.name === name) &&\n      editedContact.name !== name\n    ) {\n      return alert(`${name} is already in contacts!`);\n    }\n\n    setForm(false);\n    dispatch(editContact({ id: editedContact.id, name, number }));\n  };\n\n  const inputHandler = ({ target }) => {\n    switch (target.name) {\n      case 'name':\n        setName(target.value);\n        break;\n      case 'number':\n        setNumber(target.value);\n        break;\n      default:\n        break;\n    }\n  };\n\n  return (\n    <Box component=\"form\" onSubmit={submitHandler}>\n      <Box>\n        <TextField\n          sx={{ marginBottom: '16px' }}\n          value={name}\n          variant=\"outlined\"\n          onInput={inputHandler}\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan!\"\n          required\n          fullWidth={true}\n        />\n        <TextField\n          sx={{ marginBottom: '16px' }}\n          value={number}\n          variant=\"outlined\"\n          onInput={inputHandler}\n          type=\"tel\"\n          name=\"number\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +!\"\n          required\n          fullWidth={true}\n        />\n      </Box>\n      <Button variant=\"outlined\" type=\"submit\">\n        Save edits\n      </Button>\n      <Button variant=\"outlined\" type=\"button\" onClick={() => setForm(false)}>\n        Close\n      </Button>\n    </Box>\n  );\n};\n","import { useState } from 'react';\n\nimport { Section } from '../components/Section';\nimport { AddContact } from '../components/AddContact';\nimport { ContactsFilter } from '../components/ContactsFilter';\nimport { ContactsList } from '../components/ContactsList';\nimport { EditContactForm } from '../components/EditContactForm';\n\nconst Contacts = () => {\n  const [form, setForm] = useState(false);\n  return (\n    <>\n      <Section title=\"Contacts\">\n        <ContactsFilter />\n        <ContactsList setForm={setForm} />\n      </Section>\n      {form && (\n        <Section title=\"Edit contact\">\n          <EditContactForm setForm={setForm} />\n        </Section>\n      )}\n      <Section title=\"Add contact\">\n        <AddContact />\n      </Section>\n    </>\n  );\n};\n\nexport default Contacts;\n"],"names":["selectContacts","state","contacts","selectLoading","contactsLoading","selectEdit","editedContact","AddContact","useState","name","setName","number","setNumber","dispatch","useDispatch","useSelector","inputHandler","target","value","Box","component","onSubmit","event","preventDefault","id","nanoid","find","contact","alert","addContact","reset","TextField","sx","marginBottom","label","variant","onInput","type","pattern","title","required","fullWidth","Button","ContactsFilter","changeFilter","ContactsItem","deleteHandler","editHandler","ListItem","Avatar","Typography","length","substr","onClick","Divider","selectFilter","filter","ContactsList","setForm","loading","useEffect","fetchContacts","deleteContact","editedContactSaver","List","toLowerCase","includes","sort","a","b","map","height","color","EditContactForm","editContact","form","Section"],"sourceRoot":""}