{"version":3,"file":"static/js/270.785e8213.chunk.js","mappings":"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","sources":["redux/contacts/contactsSelectors.js","components/AddContact/AddContact.jsx","components/ContactsFilter/ContactsFilter.jsx","redux/filter/filterSelectors.js","components/ContactsList/ContactsList.jsx","components/EditContactForm/EditContactForm.jsx","pages/Contacts.jsx"],"sourcesContent":["export const selectContacts = state => state.contacts.contacts;\nexport const selectLoading = state => state.contacts.contactslLoading;\nexport const selectEdit = state => state.contacts.editedContact;\n","import { useState } from 'react';\nimport { nanoid } from 'nanoid';\n\nimport { useSelector, useDispatch } from 'react-redux';\nimport { addContact } from 'redux/contacts/contactsOperations';\nimport { selectContacts } from 'redux/contacts/contactsSelectors';\n\nexport const AddContact = () => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n\n  const submitHandler = event => {\n    event.preventDefault();\n\n    const id = nanoid();\n\n    if (contacts.find(contact => contact.name === name)) {\n      return alert(`${name} is already in contacts!`);\n    }\n\n    dispatch(addContact({ name, number, id }));\n\n    event.target.reset();\n  };\n\n  const inputHandler = ({ target }) => {\n    switch (target.name) {\n      case 'name':\n        setName(target.value);\n        break;\n      case 'number':\n        setNumber(target.value);\n        break;\n      default:\n        break;\n    }\n  };\n\n  return (\n    <form onSubmit={submitHandler}>\n      <div>\n        <label>\n          <input\n            onInput={inputHandler}\n            type=\"text\"\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan!\"\n            required\n          />\n          <b>→ name</b>\n        </label>\n        <label>\n          <input\n            onInput={inputHandler}\n            type=\"tel\"\n            name=\"number\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +!\"\n            required\n          />\n          <b>→ number</b>\n        </label>\n      </div>\n      <button type=\"submit\">Add contact</button>\n    </form>\n  );\n};\n","import { changeFilter } from 'redux/filter/filterSlice';\nimport { useDispatch } from 'react-redux';\n\nexport const ContactsFilter = () => {\n  const dispatch = useDispatch();\n\n  const filterHandler = ({ target: { value } }) => {\n    dispatch(changeFilter(value));\n  };\n\n  return (\n    <>\n      <p>\n        Find contacts by <b>name:</b>\n      </p>\n      <input\n        onInput={filterHandler}\n        type=\"text\"\n        name=\"name\"\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n      />\n    </>\n  );\n};\n","export const selectFilter = state => state.filter.filter;\n","import Avatar from 'react-avatar';\nimport { RotatingTriangles } from 'react-loader-spinner';\n\nimport { deleteContact } from 'redux/contacts/contactsOperations';\nimport {\n  selectContacts,\n  selectLoading,\n} from 'redux/contacts/contactsSelectors';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useEffect } from 'react';\n\nimport { fetchContacts } from 'redux/contacts/contactsOperations';\nimport { selectFilter } from 'redux/filter/filterSelectors';\nimport { editedContactSaver } from 'redux/contacts/contactsSlice';\n\nexport const ContactsList = ({ setForm }) => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n  const loading = useSelector(selectLoading);\n  const filter = useSelector(selectFilter);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  const filteredContacts = () => {\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter.toLowerCase())\n    );\n  };\n\n  const deleteHandler = ({ target: { name } }) => {\n    const id = name;\n    dispatch(deleteContact(id));\n  };\n\n  const editHandler = ({ target: { name } }) => {\n    const id = name;\n    const contact = contacts.find(contact => contact.id === id);\n    dispatch(editedContactSaver(contact));\n    setForm(true);\n  };\n\n  return (\n    <>\n      <ul>\n        {filteredContacts()\n          .sort((a, b) => (a.name > b.name ? 1 : -1))\n          .map(contact => (\n            <li key={contact.id}>\n              <Avatar\n                name={contact.name}\n                maxInitials={2}\n                size={30}\n                round={true}\n              />\n              <p>\n                <b>\n                  {contact.name.length < 35\n                    ? contact.name\n                    : contact.name.substr(0, 35) + '...'}\n                  :\n                </b>{' '}\n                {contact.number}\n              </p>\n              <div>\n                <button name={contact.id} onClick={editHandler}>\n                  Edit\n                </button>\n                <button name={contact.id} onClick={deleteHandler}>\n                  Delete\n                </button>\n              </div>\n            </li>\n          ))}\n      </ul>\n      {contacts.length > 0 && (\n        <p>\n          Sorted by <b>name</b>\n        </p>\n      )}\n      {loading && (\n        <RotatingTriangles\n          height={60}\n          colors={['#a52a2a', '#EF8354', '#DB5461']}\n        />\n      )}\n    </>\n  );\n};\n","import { useState, useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\n\nimport { selectContacts } from 'redux/contacts/contactsSelectors';\n\nimport { selectEdit } from 'redux/contacts/contactsSelectors';\nimport { editContact } from 'redux/contacts/contactsOperations';\n\nexport const EditContactForm = ({ setForm }) => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const editedContact = useSelector(selectEdit);\n\n  useEffect(() => {\n    setName(editedContact.name);\n    setNumber(editedContact.number);\n  }, [editedContact]);\n\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n\n  const submitHandler = event => {\n    event.preventDefault();\n\n    if (\n      contacts.find(contact => contact.name === name) &&\n      editedContact.name !== name\n    ) {\n      return alert(`${name} is already in contacts!`);\n    }\n\n    setForm(false);\n    dispatch(editContact({ id: editedContact.id, name, number }));\n  };\n\n  const inputHandler = ({ target }) => {\n    switch (target.name) {\n      case 'name':\n        setName(target.value);\n        break;\n      case 'number':\n        setNumber(target.value);\n        break;\n      default:\n        break;\n    }\n  };\n\n  return (\n    <form onSubmit={submitHandler}>\n      <div>\n        <label>\n          <input\n            onInput={inputHandler}\n            value={name}\n            type=\"text\"\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan!\"\n            required\n          />\n          <b>→ name</b>\n        </label>\n        <label>\n          <input\n            onInput={inputHandler}\n            value={number}\n            type=\"tel\"\n            name=\"number\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +!\"\n            required\n          />\n          <b>→ number</b>\n        </label>\n      </div>\n      <button type=\"submit\">Save edits</button>\n      <button type=\"button\" onClick={() => setForm(false)}>\n        Close\n      </button>\n    </form>\n  );\n};\n","import { useState } from 'react';\n\nimport { Section } from '../components/Section';\nimport { AddContact } from '../components/AddContact';\nimport { ContactsFilter } from '../components/ContactsFilter';\nimport { ContactsList } from '../components/ContactsList';\nimport { EditContactForm } from '../components/EditContactForm';\n\nconst Contacts = () => {\n  const [form, setForm] = useState(false);\n  return (\n    <>\n      <Section title=\"Contacts\">\n        <ContactsFilter />\n        <ContactsList setForm={setForm} />\n      </Section>\n      {form && (\n        <Section title=\"Edit contact\">\n          <EditContactForm setForm={setForm} />\n        </Section>\n      )}\n      <Section title=\"Add contact\">\n        <AddContact />\n      </Section>\n      ;\n    </>\n  );\n};\n\nexport default Contacts;\n"],"names":["selectContacts","state","contacts","selectLoading","contactslLoading","selectEdit","editedContact","AddContact","useState","name","setName","number","setNumber","dispatch","useDispatch","useSelector","inputHandler","target","value","onSubmit","event","preventDefault","id","nanoid","find","contact","alert","addContact","reset","onInput","type","pattern","title","required","ContactsFilter","changeFilter","selectFilter","filter","ContactsList","setForm","loading","useEffect","fetchContacts","deleteHandler","deleteContact","editHandler","editedContactSaver","toLowerCase","includes","sort","a","b","map","maxInitials","size","round","length","substr","onClick","height","colors","EditContactForm","editContact","form","Section"],"sourceRoot":""}